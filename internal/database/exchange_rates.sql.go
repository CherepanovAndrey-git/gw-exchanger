// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_rates.sql

package database

import (
	"context"
)

const getAllRates = `-- name: GetAllRates :many
SELECT from_currency, to_currency, rate FROM exchange_rates
`

type GetAllRatesRow struct {
	FromCurrency string
	ToCurrency   string
	Rate         string
}

func (q *Queries) GetAllRates(ctx context.Context) ([]GetAllRatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRatesRow
	for rows.Next() {
		var i GetAllRatesRow
		if err := rows.Scan(&i.FromCurrency, &i.ToCurrency, &i.Rate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRate = `-- name: GetRate :one
SELECT rate FROM exchange_rates
WHERE from_currency = $1 AND to_currency = $2
`

type GetRateParams struct {
	FromCurrency string
	ToCurrency   string
}

func (q *Queries) GetRate(ctx context.Context, arg GetRateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getRate, arg.FromCurrency, arg.ToCurrency)
	var rate string
	err := row.Scan(&rate)
	return rate, err
}

const updateRate = `-- name: UpdateRate :exec
UPDATE exchange_rates
SET rate = $3, updated_at = NOW()
WHERE from_currency = $1 AND to_currency = $2
`

type UpdateRateParams struct {
	FromCurrency string
	ToCurrency   string
	Rate         string
}

func (q *Queries) UpdateRate(ctx context.Context, arg UpdateRateParams) error {
	_, err := q.db.ExecContext(ctx, updateRate, arg.FromCurrency, arg.ToCurrency, arg.Rate)
	return err
}
